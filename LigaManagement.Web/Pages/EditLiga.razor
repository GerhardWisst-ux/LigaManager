@page "/Ligamanager/createliga"
@page "/Ligamanager/editliga/{Id}"
@using LigaManagement.Web.Services.Contracts;

@inherits LigaManagerManagement.Web.Pages.LigenListBase
@inject ILigaService _Ligaservice
@inject NavigationManager _navigationManager
@inject NotificationService NotificationService

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">    
    <link href='https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/ui-darkness/jquery-ui.css' rel='stylesheet'>

</head>

<style>
    .rz-button.rz-link {
        background: none !important;
    }


        .rz-button.rz-link .rz-button-text {
            color: var(--rz-link-color);
        }


        .rz-button.rz-link:hover .rz-button-text {
            text-decoration: underline !important;
        }

    .rz-chkbox-box {
        border-color: darkgray !important;
    }
</style>



<div class="container">
    <div class="form-group row">
        <div class="col-sm-12">
            <RadzenCard class="m-0 rz-shadow-3" style="height:auto;">
                <div class="d-flex flex-row">
                    <div class="card-body">
                        <h2>@Titel</h2>
                    </div>
                </div>
            </RadzenCard>
        </div>
    </div>

    <div class="col-12">
        <EditForm Model="Liga" OnValidSubmit="UpsertLiga">
            <div class="form-group row">
                <RadzenLabel Text="Liganame" class="col-sm-3" Component="txtLiganame">@Localizer["Liganame"].Value</RadzenLabel>
                <InputText required id="txtTore1" @bind-Value="Liga.Liganame" class="form-control col-sm-9"></InputText>
                <ValidationMessage For="(()=>Liga.Liganame)"></ValidationMessage>
            </div>
            <div class="form-group row">
                <RadzenLabel Text="Verband" class="col-sm-3" Component="txtVerband">@Localizer["Verband"].Value</RadzenLabel>
                <InputText required id="txtTore1" @bind-Value="Liga.Verband" class="form-control col-sm-9"></InputText>
                <ValidationMessage For="(()=>Liga.Verband)"></ValidationMessage>
            </div>
            <div class="form-group row">
                <RadzenLabel Text="Erstaustragung" class="col-sm-3" Component="txtErstaustragung">@Localizer["Erstaustragung"].Value</RadzenLabel>
                <InputDate required id="txtErstaustragung" @bind-Value="Liga.Erstaustragung" class="form-control col-sm-9"></InputDate>
                <ValidationMessage For="()=>Liga.Erstaustragung"></ValidationMessage>
            </div>
            <div class="form-group row">
                <RadzenLabel Text="Saisonen" class="col-sm-3" Component="txtSaisonen">@Localizer["Saisonen"].Value</RadzenLabel>
                <InputNumber required id="txtSaisonen" @bind-Value="Liga.Saisonen" class="form-control col-sm-9"></InputNumber>
                <ValidationMessage For="()=>Liga.Saisonen"></ValidationMessage>
            </div>
            <div class="form-group row">
                <RadzenLabel Text="Rekordspieler" class="col-sm-3" Component="txtRekordspieler">@Localizer["Rekordspieler"].Value</RadzenLabel>
                <InputText required id="txtRekordspieler" @bind-Value="Liga.Rekordspieler" class="form-control col-sm-9"></InputText>
                <ValidationMessage For="()=>Liga.Rekordspieler"></ValidationMessage>
            </div>
            <div class="form-group row">
                <RadzenLabel Text="Spiele Rekordspieler" class="col-sm-3" Component="txtSaisonen">@Localizer["Spiele Rekordspieler"].Value</RadzenLabel>
                <InputNumber required id="txtSpiele_Rekordspieler" @bind-Value="Liga.Spiele_Rekordspieler" class="form-control col-sm-9"></InputNumber>
                <ValidationMessage For="()=>Liga.Spiele_Rekordspieler"></ValidationMessage>
            </div>
            <div class="form-group row my-4">
                <RadzenLabel Text="lblAktiv" class="col-sm-3" Component="chkAktiv">@Localizer["Aktiv"].Value</RadzenLabel>
                <RadzenCheckBox @bind-Value="Liga.Aktiv" Style="border-width:0px; width:40px;max-width:40px;margin-left:0px;" class="form-control col-sm-9" Name="chkAktiv" />
                <RadzenColumn Size="8" Offset="4" class="rz-white rz-p-0">
                </RadzenColumn>
                <ValidationMessage For="()=>Liga.Aktiv"></ValidationMessage>
            </div>
            <div class="form-group row my-4">
                <RadzenLabel Text="lblEM" class="col-sm-3" Component="chkEMWM">@Localizer["EM-WM"].Value</RadzenLabel>
                <RadzenCheckBox @bind-Value="Liga.EMWM" Style="border-width:0px; width:40px;max-width:40px;margin-left:0px;" class="form-control col-sm-9" Name="chkEMWM" />
                <RadzenColumn Size="8" Offset="4" class="rz-white rz-p-0">
                </RadzenColumn>
                <ValidationMessage For="()=>Liga.EMWM"></ValidationMessage>
            </div>

            <div class="form-group row">
                <RadzenButton title="@Localizer["Speichert Liga ab"].Value" style="margin-left:5px;" id="btnSpeichern" Click="UpsertLiga" class="btn btn-primary" Text="@Localizer["Speichern"].Value">
                    <span class="glyphicon glyphicon-save"></span>@Localizer["Speichern"].Value
                </RadzenButton>
                <RadzenButton title="@Localizer["Löscht Liga"].Value" style="margin-left:5px;" id="btnDelete" Click="Confirm" class="btn btn-danger" Text="@Localizer["Löschen"].Value">
                    <span class="glyphicon glyphicon-remove"></span>@Localizer["Löschen"].Value
                </RadzenButton>
                <RadzenButton title="@Localizer["Zurück zu Ligen"].Value" style="margin-left:5px;" Click="Zurueck_Click" id="btnZurueck" class="btn btn-secodary" Text="@Localizer["Zurück"].Value">

                </RadzenButton>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private Liga Liga { get; set; } = new Liga();
    private string Titel { get; set; }
    public bool IsLoading { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == "0" || Id is null)
            {
                Id = "0";
                Titel = @Localizer["Neuanlage Liga"].Value;
                IsLoading = false;
                Liga = await _Ligaservice.GetLiga(Convert.ToInt32(Id));
                StateHasChanged();
            }
            else
            {
                Titel = @Localizer["BearbeitenLiga"].Value;
                await LoadLiga();
            }
        }
    }

    private async Task LoadLiga()
    {
        IsLoading = true;
        Liga = await _Ligaservice.GetLiga(Convert.ToInt32(Id));
        IsLoading = false;
        StateHasChanged();
    }
    private async Task UpsertLiga()
    {
        bool bError = false;

        if ((Liga.Liganame == null))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = @Localizer["BearbeitenLiga"].Value, Detail = "Liganame nicht angegeben.Speichern nicht möglich." });
            bError = true;
        }

        else if (Liga.Erstaustragung.Date.ToString() == "01.01.0001")
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = @Localizer["BearbeitenLiga"].Value, Detail = "Datum nicht angegeben.Speichern nicht möglich." });
            bError = true;
        }

        else if (Liga.Verband == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = @Localizer["BearbeitenLiga"].Value, Detail = "Verband nicht angegeben.Speichern nicht möglich." });
            bError = true;
        }

        if (bError == true)
            return;

        if (Id == "0")
        {
            var ligen = await _Ligaservice.GetLigen();
            List<Liga> ligenList = ligen.OrderBy(x => x.Liganummer).ToList();
            int iMaxLigaNummer = ligenList.Max(x => x.Liganummer) + 1;
            Liga.LandID = 57;
            Liga.Liganummer = iMaxLigaNummer;

            await _Ligaservice.CreateLiga(Liga);
        }
        else
        {
            var ligen = await _Ligaservice.GetLigen();
            // List<Liga> ligenList = ligen.ToList();
            // string resLiganame = ligenList.Single(x => x.Liganame == Liga.Liganame).Liganame;
            // int  resLiganummer = ligenList.Single(x => x.Liganame == Liga.Liganame).Liganummer;
            // for (int i = 0; i < ligen.Count(); i++)
            // {
            //     if (Liga.Liganame == ligenList[i].Liganame)
            //     {
            //         NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Bearbeiten Liga", Detail = "Liganame  " + Liga.Liganame + " schon vorhanden.Speichern nicht möglich." });
            //         return;
            //     }
            // }

            // for (int i = 0; i < ligen.Count(); i++)
            // {
            //     if (Liga.Liganummer == ligenList[i].Liganummer)
            //     {
            //         NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Bearbeiten Liga", Detail = "Liganummer " + Liga.Liganummer + " schon vorhanden.Speichern nicht möglich." });
            //         return;
            //     }
            // }

            //update
            await _Ligaservice.UpdateLiga(Liga);
        }
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info, Summary = Localizer["BearbeitenLiga"].Value, Detail = Localizer["Abgespeichert"].Value });
        // _navigationManager.NavigateTo("ligen");
    }
    protected async Task<bool> Confirm()
    {
        string message = string.Empty;

        if (Globals.iUserGroup == (int)Globals.UserGroup.Gast || Globals.iUserGroup == 0)
        {
            message = "Sie können dieses Spiel nicht löschen?";
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Löschen Verein", Detail = "Löschen" });
            return false;
        }
        message = Localizer["MessageDelete"].Value;

        var result = await jsr.InvokeAsync<bool>("confirm", new[] { message });

        if (result)
        {
            await _Ligaservice.DeleteLiga(Convert.ToInt32(Id));
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = Localizer["Löschen Liga"].Value, Detail = Localizer["Gelöscht"].Value });
        }

        return false;
    }

    private void Zurueck_Click()
    {
        _navigationManager.NavigateTo("Ligamanager/ligen");
    }
}
