@page "/Ligamanager/account/login"
@using LigaManagement.Api.Models
@using Microsoft.Extensions.Localization
@using LigaManagement.Web.Services.Contracts
@inject LigaManagerManagement.Web.Services.LigaManagerAuthenticationStateProvider LigamanagerAuhenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> Localizer

<head>

</head>

<style type="text/css">

    .rz-chkbox-box {
        border-color: darkgray !important;
    }

    .rz-label {
        margin-left: 0px !important;
        padding-left: 0px !important;
    }

    #balken {
        height: 30px;
        width: 100%;
        padding-left: 5px;
        top: 0px;        
        position: relative;
        left: 0px;
        color: red;
        background-color: white;
    }
    /* Style the container for inputs */
    .container {
        background-color: #f1f1f1;
        padding: 20px;
    }

    /* The message box is shown when the user clicks on the password field */
    #message {
        display: none;
        background: #f1f1f1;
        color: #000;
        position: relative;
        padding: 20px;
        margin-top: 10px;
    }

        #message p {
            padding: 10px 35px;
            font-size: 18px;
        }

    /* Add a green text color and a checkmark when the requirements are right */
    .valid {
        color: green;
    }

        .valid:before {
            position: relative;
            left: -35px;
            content: "✔";
        }

    /* Add a red text color and an "x" when the requirements are wrong */
    .invalid {
        color: red;
    }

        .invalid:before {
            position: relative;
            left: -35px;
            content: "✖";
        }

</style>

<div class="card">
    <h3 class="card-header">Login</h3>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

            <DataAnnotationsValidator />
            <div class="form-group">
                <RadzenLabel Text="@Localizer["Benutzername"].Value" class="col-12 " Component="txtVereinsname2">@Localizer["Benutzername"].Value</RadzenLabel>
                <RadzenTextBox @bind-Value="model.Username" id="usrname" name="username" class="form-control col-12" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <RadzenLabel Text="@Localizer["Passwort"].Value" class="col-12" Component="txtVereinsname2">@Localizer["Passwort"].Value</RadzenLabel>
                <RadzenTextBox @bind-Value="model.Password" id="psw" name="psw" type="password" class="form-control col-12"></RadzenTextBox>
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <div style="@ShowInvalid;" id="balken">@Localizer["Benutzername oder Passwort falsch"].Value</div>
            </div>

            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                @Localizer["Login"].Value
            </button>
            <NavLink href="Ligamanager/account/register" style="display:none;" class="btn btn-link">@Localizer["Registrieren"].Value</NavLink>
        </EditForm>
        <div id="message">
            <h3>Password must contain the following:</h3>
            <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
            <p id="capital" class="invalid">A <b>capital (uppercase)</b> letter</p>
            <p id="number" class="invalid">A <b>number</b></p>
            <p id="length" class="invalid">Minimum <b>8 characters</b></p>
        </div>
    </div>
</div>


@code {
    private User model = new User();
    private bool loading;
    private string ShowInvalid = "visibility:hidden";

    [Inject]
    public IUserService UserService { get; set; }

    private async void OnValidSubmit()
    {
        // reset alerts on submit

        loading = true;
        try
        {
            LigamanagerAuhenticationStateProvider.CurrentUser.Username = "";
            LigamanagerAuhenticationStateProvider.CurrentUser.Password = "";
            await LigamanagerAuhenticationStateProvider.LoginAsync(model.Username, model.Password);

            if (LigamanagerAuhenticationStateProvider.CurrentUser.Username == "")
            {
                ShowInvalid = "display:block";
                loading = false;
                StateHasChanged();
                return;
            }
            else
            {
                Globals.CurrentRole = LigamanagerAuhenticationStateProvider.CurrentUser.Role;
                ShowInvalid = "visibility:hidden";
                NavigationManager.NavigateTo("/Ligamanager");
            }

        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}

<script>
    var myInput = document.getElementsByName("psw");
    var letter = document.getElementById("letter");
    var capital = document.getElementById("capital");
    var number = document.getElementById("number");
    var length = document.getElementById("length");

    // When the user clicks on the password field, show the message box
    myInput.onfocus = function () {
        document.getElementById("message").style.display = "block";
    }

    // When the user clicks outside of the password field, hide the message box
    myInput.onblur = function () {
        document.getElementById("message").style.display = "none";
    }

    // When the user starts to type something inside the password field
    myInput.onkeyup = function () {
        // Validate lowercase letters
        var lowerCaseLetters = /[a-z]/g;
        if (myInput.value.match(lowerCaseLetters)) {
            letter.classList.remove("invalid");
            letter.classList.add("valid");
        } else {
            letter.classList.remove("valid");
            letter.classList.add("invalid");
        }

        // Validate capital letters
        var upperCaseLetters = /[A-Z]/g;
        if (myInput.value.match(upperCaseLetters)) {
            capital.classList.remove("invalid");
            capital.classList.add("valid");
        } else {
            capital.classList.remove("valid");
            capital.classList.add("invalid");
        }

        // Validate numbers
        var numbers = /[0-9]/g;
        if (myInput.value.match(numbers)) {
            number.classList.remove("invalid");
            number.classList.add("valid");
        } else {
            number.classList.remove("valid");
            number.classList.add("invalid");
        }

        // Validate length
        if (myInput.value.length >= 8) {
            length.classList.remove("invalid");
            length.classList.add("valid");
        } else {
            length.classList.remove("valid");
            length.classList.add("invalid");
        }
    }
</script>
