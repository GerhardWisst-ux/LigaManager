@page "/Ligamanager/account/login"
@using LigaManagement.Api.Models
@using Microsoft.Extensions.Localization
@using LigaManagement.Web.Services.Contracts
@inject LigaManagerManagement.Web.Services.LigaManagerAuthenticationStateProvider LigamanagerAuhenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> Localizer

<head>

</head>

<style type="text/css">

    .rz-chkbox-box {
        border-color: darkgray !important;
    }

    .rz-label {
        margin-left: 0px !important;
        padding-left: 0px !important;
    }

    
</style>

<div class="card">
    <h3 class="card-header">Login</h3>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">

            <DataAnnotationsValidator />
            <div class="form-group">
                <RadzenLabel Text="@Localizer["Benutzername"].Value" class="col-12 " Component="txtVereinsname2">@Localizer["Benutzername"].Value</RadzenLabel>
                <InputText @bind-Value="model.Username" class="form-control col-12" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <RadzenLabel Text="@Localizer["Passwort"].Value" class="col-12" Component="txtVereinsname2">@Localizer["Passwort"].Value</RadzenLabel>
                <InputText @bind-Value="model.Password" type="password" class="form-control col-12" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                @Localizer["Login"].Value
            </button>
            <NavLink href="Ligamanager/account/register" style="display:none;" class="btn btn-link">@Localizer["Registrieren"].Value</NavLink>
        </EditForm>
    </div>
</div>


@code {
    private User model = new User();
    private bool loading;

    [Inject]
    public IUserService UserService { get; set; }

    private async void OnValidSubmit()
    {
        // reset alerts on submit

        loading = true;
        try
        {
            await LigamanagerAuhenticationStateProvider.LoginAsync(model.Username, model.Password);

            if (LigamanagerAuhenticationStateProvider.CurrentUser == null)
            {
                return;
            }
            else
            {
                Globals.CurrentRole = LigamanagerAuhenticationStateProvider.CurrentUser.Role;
                

                NavigationManager.NavigateTo("/Ligamanager");
            }
            
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }


}