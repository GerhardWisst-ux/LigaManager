@page "/createverein"
@page "/editverein/{Id}"
@using LigaManagement.Web.Services.Contracts;
@using LigaManagerManagement.Models;
@inherits LigaManagerManagement.Web.Pages.VereineListBase
@inject LigaManagement.Web.Services.Contracts.IVereineService _VereineService
@inject NavigationManager _navigationManager
@inject NotificationService NotificationService

<style>
     .rz-button.rz-link {
        background: none !important;       
    }

    
     .rz-button.rz-link .rz-button-text {
         color: var(--rz-link-color);        
    }

    
     .rz-button.rz-link:hover .rz-button-text {
         text-decoration: underline !important;        
    }

    </style>

<div class="row my-2">
    <div class="form-group row">
        <div class="col-sm-12">
            <RadzenCard class="m-0 mb-3">
                <div class="d-flex flex-row">
                    <div class="card-body ">
                        <h2 style="display:inline-block;">@Titel Verein</h2>
                    </div>
                </div>
            </RadzenCard>
        </div>
        <div class="col-sm-12">
            <EditForm Model="Vereine" OnValidSubmit="UpsertVerein">
                <div class="form-group row">
                    <RadzenLabel Text="Vereinsname" class="col-sm-3" Component="txtVereinsname1">Vereinsname</RadzenLabel>
                    <InputText required id="txtVereinsname" @bind-Value="Verein.Vereinsname1" class="form-control col-sm-9"></InputText>
                    <ValidationMessage For="()=>Verein.Vereinsname1"></ValidationMessage>
                </div>
                <div class="form-group row">
                    <RadzenLabel Text="Stadion" class="col-sm-3" Component="txtStadion">Stadion</RadzenLabel>
                    <InputText required id="txtStadion" @bind-Value="Verein.Stadion" class="form-control col-sm-9"></InputText>
                    <ValidationMessage For="()=>Verein.Stadion"></ValidationMessage>
                </div>
                <div class="form-group row">
                    <RadzenLabel Text="Erfolge" class="col-sm-3" Component="txtStadion">Erfolge</RadzenLabel>
                    @* <InputText required Resizable id="txtErfolge" @bind-Value="Verein.Erfolge" class="form-control col-sm-9"></InputText> *@


                    <RadzenTextArea @bind-Value=@Verein.Erfolge Cols="105" Rows="7" class="form-control col-sm-9" aria-label="Textfeld " />


                    <ValidationMessage For="()=>Verein.Erfolge"></ValidationMessage>
                </div>
                <div class="form-group row">
                    <RadzenLabel Text="Gegründet" class="col-sm-3" Component="txtStadion">Gegründet</RadzenLabel>
                    <InputNumber required id="txtGegründet" @bind-Value="Verein.Gegruendet" class="form-control col-sm-9"></InputNumber>
                    <ValidationMessage For="()=>Verein.Gegruendet"></ValidationMessage>
                </div>
                <div class="form-group row my-2">
                    @* <button class="btn btn-primary">Speichern</button> *@
                    <RadzenButton title="Speichert Verein ab" style="margin-left:5px;" id="btnSpeichern" Click=UpsertVerein class="btn btn-primary" Text="Speichern">
                     
                    </RadzenButton>

                    <RadzenButton title="Zurück zu Vereine" style="margin-left:5px;" Click="Zurueck_Click" id="btnSpeichern" class="btn btn-secodary" Text="Zurück">
                        
                    </RadzenButton>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private Verein Verein { get; set; } = new Verein();
    private string Titel { get; set; }
    public bool IsLoading { get; set; }
    public IEnumerable<Verein> VereineMax { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == "0" || Id is null)
            {
                //Neuanlage
                Titel = "Neuanlage";
                Id = "0";
                IsLoading = false;
            }
            else
            {
                //Bearbeiten
                Titel = "Bearbeiten";
                await LoadVerein();
            }
        }
    }


    private async Task LoadVerein()
    {
        IsLoading = true;
        StateHasChanged();
        Verein = await _VereineService.GetVerein(Convert.ToInt32(Id));
        IsLoading = false;
        StateHasChanged();
    }
    private async Task UpsertVerein()
    {
        if (Id == "0")
        {
            //create

            VereineMax = await VereineService.GetVereine();
            int iMax = VereineMax.Select(i => i.VereinNr).Max();
            Verein.VereinNr = iMax + 1;
            Verein.Vereinsname2 = Verein.Vereinsname1;
            await _VereineService.CreateVerein(Verein);
        }
        else
        {
            //update
            await _VereineService.UpdateVerein(Verein);
        }
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Bearbeiten Verein", Detail = "Abgespeichert" });
       // _navigationManager.NavigateTo("vereine");
    }

    private void Zurueck_Click()
    {
        _navigationManager.NavigateTo("vereine");
    }
  }
