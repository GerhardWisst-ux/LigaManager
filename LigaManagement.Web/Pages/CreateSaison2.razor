@page "/createsaison2"
@inherits LigaManagerManagement.Web.Pages.SaisonenListBase
@inject DialogService DialogService

<EditForm Model="Saison">
    <RadzenSteps Change="@OnChange" CanChange="@CanChange">
        <Steps>
            <RadzenStepsItem>               
                <RadzenRow>
                    <RadzenText Text="Grunddaten" />
                </RadzenRow>
                <div class="form-group">                    
                    <RadzenLabel Text="Label" class="col-sm-3 pl-0" Component="txtSaisonname">Saisonname</RadzenLabel>
                    <RadzenTextBox required id="txtSaisonname" @bind-Value="Saison.Saisonname" class="form-control col-9"></RadzenTextBox>
                    <ValidationMessage For="()=>Saison.Saisonname"></ValidationMessage>
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Label" class="col-sm-3 pl-0" Component="cboLiga">Liganame</RadzenLabel>                   
                    <select id="cboLiga" class="form-control col-9 dropdown" @onchange="LigaChange">
                        <option value="@Convert.ToInt32(Globals.currentLiga)"> @Liganame </option>
                        @if (LigenList != null)
                        {
                            @foreach (var liga in LigenList.OrderBy(o => o.LigaID))
                            {
                                <option value="@liga.LigaID"> @liga.Liganame </option>
                            }
                        }
                    </select>
                    <label title="Bitte Liga wählen" style="display:@DisplayErrorLiga;color:red;" id="lblErrorLiga">Bitte Liga wählen</label>
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Label" class="col-sm-3 pl-0" Component="chkAktiv">Aktuell</RadzenLabel>
                    <RadzenCheckBox @bind-Value="Saison.Aktuell" Style="border-width:0px;" class="form-control" Name="chkAktiv" />
                    <ValidationMessage For="()=>Saison.Aktuell"></ValidationMessage>
                </div>
                <div class="form-group">
                    <RadzenLabel Text="Label" class="col-sm-3 pl-0" Component="chkAbgeschlossen">Abgeschlossen</RadzenLabel>
                    <RadzenCheckBox @bind-Value="Saison.Abgeschlossen" Style="border-width:0px;" class="form-control"  Name="chkAbgeschlossen" />
                    <ValidationMessage For="()=>Saison.Abgeschlossen"></ValidationMessage>
                </div>

               @*  <div class="form-group py-2">
                    <button class="btn btn-primary"><span class="glyphicon glyphicon-save"></span>Speichern</button>
                    <NavLink href="/saisonen" class="btn btn-secondary"><span class="glyphicon glyphicon-arrow-left"></span>Zurück</NavLink>
                </div> *@
            </RadzenStepsItem>
            <RadzenStepsItem>               
                <RadzenRow>
                    <RadzenText Text="Vereine zuordnen" />
                </RadzenRow>
                <div class="form-group">
                    <ul class="ul">
                        @foreach (var verein in VereineList.OrderBy(x => x.Vereinname1))
                        {
                            string Id = @verein.VereinID;
                            <li><input @onchange="eventArgs => { CheckboxClicked(Id, eventArgs.Value); }" checked="@verein.VereinChecked" data-bind=" @verein.VereinID" class="col-sm-2" type="checkbox"><span>@verein.Vereinname1</span></li>
                        }

                    </ul>
                </div>
                <div class="form-group">
                    <ul class="ul">
                        @foreach (var verein in VereineSaisonList.OrderBy(x => x.Vereinname1))
                        {
                            string Id = @verein.VereinID;
                            <li><input data-bind=" @verein.VereinID" class="col-sm-4" type="checkbox"><span>@verein.Vereinname1</span></li>
                        }
                    </ul>
                </div>
                @* <button onclick="Zuordnen" id="btnModalPopup" class="btn btn-primary"><span class="glyphicon glyphicon-save"></span>Vereine zuordnen</button> *@
            </RadzenStepsItem>
            <RadzenStepsItem>
                <RadzenRow>
                    <RadzenText Text="Zusammenfassung" />
                </RadzenRow>
                @*  <RadzenDataGrid TItem="Hobby"
                Data="@AuthorList"
                @bind-Value="@selectedHobbies"
                SelectionMode="DataGridSelectionMode.Multiple"
                AllowRowSelectOnRowClick="true">
                <Columns>
                <RadzenDataGridColumn TItem="Hobby" Context="hobby">
                <Template>
                <RadzenCheckBox Value="selectedHobbies.Contains(hobby)" TValue="bool" />
                </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Hobby" Title="Hobby" Property="@nameof(Hobby.HobbyName)" />
                </Columns>
                </RadzenDataGrid> *@
                <RadzenButton Text="Speichern" Click="@SaveSaison" />
            </RadzenStepsItem>
        </Steps>
    </RadzenSteps>
</EditForm>
@code {
    private string name;
    private string savedName;

    private string address;
    private string savedAddress;

    private string aboutMe;
    private string savedAboutMe;

    //     List<string> AuthorList = new List<string>();

    //     // Add items using Add method
    //     AuthorList.Add("Mahesh Chand");
    // AuthorList.Add("Praveen Kumar");
    // AuthorList.Add("Raj Kumar");
    // AuthorList.Add("Nipun Tomar");
    // AuthorList.Add("Dinesh Beniwal");

    private IList<Hobby> selectedHobbies = new List<Hobby>();
    private List<Hobby> savedHobbies = new List<Hobby>();

    private void OnChange()
    {
        name = savedName;
        address = savedAddress;
        aboutMe = savedAboutMe;
        selectedHobbies = savedHobbies;
    }

    private async Task CanChange(StepsCanChangeEventArgs args)
    {
        if (args.SelectedIndex == 0 && savedName == name && savedAddress == address)
        {
            return;
        }

        if (args.SelectedIndex == 1 && savedAboutMe == aboutMe)
        {
            return;
        }

        if (args.SelectedIndex == 2 && savedHobbies.SequenceEqual(selectedHobbies))
        {
            return;
        }

        var response = await DialogService.Confirm(
            "Are you sure you want to contine without saving?",
            "Confirm",
            new ConfirmOptions()
                {
                    CloseDialogOnEsc = false,
                    CloseDialogOnOverlayClick = false,
                    ShowClose = false,
                    CancelButtonText = "No",
                    OkButtonText = "Yes",
                });

        if (response == false)
        {
            args.PreventDefault();
        }
    }

    private void SaveNameAndAdress()
    {
        savedName = name;
        savedAddress = address;
    }

    private void SaveAboutMe()
    {
        savedAboutMe = aboutMe;
    }

    private void SaveSaison()
    {
        savedHobbies = selectedHobbies.ToList();
    }

    private class Hobby
    {
        public Hobby(string hobbyName)
        {
            HobbyName = hobbyName;
        }

        public string HobbyName { get; set; }

        public override bool Equals(object obj)
        {
            return obj is Hobby hobby && hobby.HobbyName == HobbyName;
        }

        public override int GetHashCode()
        {
            return HobbyName.GetHashCode();
        }
    }
}

